/* Программа C++ для реализации обхода методом Эндрю, чтобы найти минимальную выпуклую оболочку. */
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct pt{
    double x, y;
};

/* для сортировки */
bool cmp (pt a, pt b){
    return (a.x < b.x || (a.x == b.x && a.y < b.y));
}

/* для проверки правого поворота */
bool cw (pt a, pt b, pt c){
    return a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y) < 0;
}

/* для проверки левого поворота */
bool ccw (pt a, pt b, pt c){
    return a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y) > 0;
}

void convex_hull(vector<pt>& a){
    if (a.size() == 0) return;
    if (a.size() == 1) return;

    sort (a.begin(), a.end(), &cmp);

    /* разбиение с помощью прямой, назовём её FE */
    pt p1 = a[0], p2 = a.back();
    vector <pt> up, down;
    up.push_back(p1);
    down.push_back(p2);
    for (size_t i = 1; i < a.size(); i++){

        /* добавляем точки, входящие в МВО и лежащие выше прямой FE */
        if (i == a.size() - 1 || cw(p1, a[i], p2)){
            while (up.size() >= 2 && !cw(up[up.size()-2], up[up.size()-1], a[i]))
                up.pop_back();
            up.push_back(a[i]);
        }

        /* добавляем точки, входящие в МВО и лежащие ниже прямой FE */
        if (i == a.size() - 1 || ccw(p1, a[i], p2)){
            while (down.size() >= 2 && !ccw(down[down.size()-2], down[down.size()-1], a[i]))
                down.pop_back();
            down.push_back(a[i]);
        }
    }

    /* очищем вектор значений точек и собираем его заново */
    a.clear();

    /* добавляем "верхние" точки */
    for (size_t i = 0; i < up.size(); ++i)
        if (up[i].x != up[i-1].x || up[i].y != up[i-1].y)
        a.push_back(up[i]);

    /* добавляем "нижние" точки */
    for (size_t i = down.size() - 2; i > 0; --i)
        if (down[i].x != down[i-1].x || down[i].y != down[i-1].y)
        a.push_back(down[i]);
}

typedef vector<pt> vec_point;

/* Драйвер программы для тестирования функций */
int main(){
    int n;
    cin >> n;
    vec_point a;
    pt temp;

    for (int i = 0; i < n; i++){
        cin >> temp.x >> temp.y;
        a.push_back(temp);
    }

    convex_hull(a);

    /* Вывод результата */
    int t = a.size();
    cout << "The points in Convex Hull are:\n";
    for (int i = 0; i < t; i++){
        cout << "(" << a[i].x << "; " << a[i].y << ")\n";
    }
    return 0;
}
